@startuml

' Define the enums
enum Color {
    WHITE
    BLACK
}

enum PieceType {
    KING
    QUEEN
    ROOK
    BISHOP
    KNIGHT
    PAWN
}

' Define the Piece class
class Piece {
    - int position
    - PieceType piece_type
    - Color color
    + Piece(int position, PieceType piece_type, Color color)
    + get_position(): int
    + get_color(): Color
    + get_piece_type(): PieceType
    + move(int destination)
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
}

' Define the derived Piece classes
class Bishop {
    + Bishop(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
}

class King {
    - bool has_moved
    + King(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
    + get_has_moved(): bool
}

class Knight {
    + Knight(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
}

class Pawn {
    - bool has_moved
    - bool has_moved_two_squares
    + Pawn(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
    + get_has_moved(): bool
    + get_has_moved_two_squares(): bool
}

class Queen {
    + Queen(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
}

class Rook {
    - bool has_moved
    + Rook(int position, Color color)
    + get_position(): int
    + get_color(): Color
    + move(int destination)
    + get_piece_type(): PieceType
    + get_valid_moves(): List<int>
    + get_eatable_moves(): List<int>
    + is_move_blocked(int destination, bool is_eat, Piece **board): bool
    + get_has_moved(): bool
}

' Define GameBoard class
class GameBoard {
    - Piece* board[64]
    + GameBoard()
    + ~GameBoard()
    + get_piece(int position): Piece*
    + get_piece(int row, int col): Piece*
    + set_piece(int position, Piece* piece)
    + move_piece(Piece* piece, int destination): int
    + is_check(Color color): bool
}

' Define Game class
class Game {
    - GameBoard* game_board
    - Color current_turn
    + Game()
    + ~Game()
    + handle_move(int row, int col, int dest): int
    + handle_move(int src, int dest): int
    + start_game()
    + is_checkmate(Color current_color): bool
    + is_stalemate(): bool
    + update_game_status()
    + get_game_board(): GameBoard*
    + get_current_turn(): Color
    + set_current_turn(Color color)
}

' Define MainWindow class
class MainWindow {
    - Game* game
    - QGridLayout* boardLayout
    - QVector<QPushButton*> squares
    + MainWindow(QWidget* parent)
    + ~MainWindow()
    + handleSquareClick()
    + resetGame()
    + updateBoard()
    + end_game(Color winner)
}

' Define relationships
Piece <|-- Bishop
Piece <|-- King
Piece <|-- Knight
Piece <|-- Pawn
Piece <|-- Queen
Piece <|-- Rook
GameBoard "1" -- "1..*" Piece : contains
Game "1" -- "1" GameBoard : uses
MainWindow "1" -- "1" Game : controls

@enduml
